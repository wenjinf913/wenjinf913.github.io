{"posts":[{"title":"Linked List","text":"21. Merge Two Sorted Lists Solution: Create a dummy node to simplify merging and initialize a pointer p starting at the dummy. Traverse both lists using pointers p1 and p2. Compare their values and append the smaller node to the merged list by updating p.next. Move the respective pointer (p1 or p2) and advance p. Once one list is exhausted, append the remaining nodes of the other list to p.next. Return the merged list starting from dummy.next, skipping the dummy node. Time Complexity: O(M+N) Space Complexity: O(1) 12345678910111213141516171819class Solution: def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -&gt; Optional[ListNode]: p1 = list1 p2 = list2 dummy = ListNode(-1) p=dummy while p1!=None and p2!=None: if p1.val &gt; p2.val: p.next = p2 p2 = p2.next else: p.next = p1 p1 = p1.next p = p.next if p1!=None: p.next = p1 elif p2!=None: p.next=p2 return dummy.next 86. Partition List Note: Ensure you break the next link for each node during traversal to avoid cycles and maintain the partition order correctly. 1234567891011121314151617181920class Solution: def partition(self, head: Optional[ListNode], x: int) -&gt; Optional[ListNode]: less = ListNode(-1) greater = ListNode(-1) l = less g = greater p=head while p!=None: if p.val&lt;x: l.next=p l = l.next else: g.next=p g = g.next temp = p.next p.next = None p = temp l.next = greater.next return less.next 23. Merge k Sorted Lists 123456789101112131415161718import heapqclass Solution: def mergeKLists(self, lists: List[Optional[ListNode]]) -&gt; Optional[ListNode]: pq = [] dummy = ListNode(-1) p = dummy if not lists: return None for i,head in enumerate(lists): if head is not None: heapq.heappush(pq, (head.val, i, head)) while pq: val, i, head = heapq.heappop(pq) p.next = head p = p.next if head.next is not None: heapq.heappush(pq, (head.next.val, i, head.next)) return dummy.next 19. Remove Nth Node From End of List Solution: Create a dummy node and set both slow and fast pointers to it, linking dummy to the head. Move the fast pointer n+1 steps ahead to maintain a gap of n nodes between fast and slow. Move both slow and fast one step at a time until fast reaches the end of the list. Update slow.next to skip the target node by pointing it to slow.next.next. Return dummy.next as the new head. 12345678910111213class Solution: def removeNthFromEnd(self, head: Optional[ListNode], n: int) -&gt; Optional[ListNode]: dummy = ListNode(-1) slow = dummy fast = dummy dummy.next = head for _ in range(n+1): fast = fast.next while fast!=None: fast=fast.next slow=slow.next slow.next = slow.next.next return dummy.next Note: Edge Case - Single Node List: If the list has only one node and n = 1, the dummy node ensures the code handles it properly by returning None. Gap of n+1: Moving fast ahead by n+1 steps is critical to ensure that when fast reaches the end, slow is at the node before the one to be removed. 142. Linked List Cycle II Solution: 123456789101112131415161718192021222324252627class Solution: def detectCycle(self, head: Optional[ListNode]) -&gt; Optional[ListNode]: &quot;&quot;&quot; 3-2: L 2--4-2: C 2-meeting point = x slow: L+x fast: 2(L+x) 2(L+x)-(L+x) = nC L+x=nC L=nC-x &quot;&quot;&quot; slow, fast = head, head while fast!=None and fast.next!=None: slow = slow.next fast = fast.next.next if slow==fast: break if not fast or fast.next==None: return None fast = slow slow = head while fast!=slow: fast = fast.next slow = slow.next return slow 160. Intersection of Two Linked Lists Solution: Initialize two pointers, p1 and p2, at the heads of the two lists, headA and headB. Traverse the lists with p1 and p2. If a pointer reaches the end of its list, redirect it to the head of the other list. Continue until p1 equals p2, which will either be the intersection node or None if there is no intersection. Return p1 as the result. Note: Handling No Intersection: If the two lists do not intersect, both p1 and p2 will eventually reach None at the same time after traversing both lists, ensuring the loop exits correctly. Time Complexity: O(m+n), where m and n are the lengths of the two lists, as each pointer traverses both lists once. 12345678910111213class Solution: def getIntersectionNode(self, headA: ListNode, headB: ListNode) -&gt; Optional[ListNode]: p1, p2 = headA, headB while p1!=p2: if p1 is None: p1 = headB else: p1 = p1.next if p2 is None: p2 = headA else: p2 = p2.next return p1","link":"/2025/01/09/linked-list/Linked-List/"}],"tags":[{"name":"Leetcode","slug":"Leetcode","link":"/tags/Leetcode/"},{"name":"Linked List","slug":"Linked-List","link":"/tags/Linked-List/"}],"categories":[{"name":"CodeCraft","slug":"CodeCraft","link":"/categories/CodeCraft/"}],"pages":[{"title":"Curriculum","text":"Wenjin Fu GitHub: https://github.com/WenjinFu Email: wenjinf@andrew.cmu.edu | Phone: +1 614-8163978 Address: 244 Robinson St, Pittsburgh, PA, 15213 EDUCATIONCarnegie Mellon University – Pittsburgh, PAMaster of Science in Electrical and Computer Engineering (GPA: 3.50/4.00)Jan 2023 - Expected Dec 2024 The Ohio State University – Columbus, OHBachelor of Science in Computer and Information Science (GPA: 3.63/4.00, Cum Laude)Aug 2018 - Dec 2022 GRE: Verbal 161 | Quantitative 170 | Analytical Writing 4.0 AWARDS Dean’s List (Autumn 2019, Spring 2020, Autumn 2021), The Ohio State University Summer Undergraduate Research Fellowship (10% acceptance) [Certificate], Purdue University, 2022 PUBLICATIONS W Fu, Y. Han, J. He, S. Baireddy, F. Zhu, “Conditional Synthetic Food Image Generation”, Electronic Imaging (EI), 2023. [arXiv] [Slide] C Zhang, TY Pan, T Chen, J Zhong, W Fu, WL Chao, “Learning with Free Object Segments for Long-Tailed Instance Segmentation”, ECCV, 2022. [PDF] X Deng*, W Fu*, P Liang, H Jing, Y Nakahira, “LLM-assisted Qualitative Learning Framework on Safety Control and Failure Recovery”, In Preparation (equal contribution). [Abstract] RESEARCH PROJECTSLatent Risk Aware LLM Guided Trajectory Generation for AV Safe ControlGraduate Research Assistant, Control and Learning Group, CMU (Jan 2024 - Present) Developed an LLM-assisted framework integrating supervised learning, reinforcement learning, and diffusion models in the nuPlan environment. OSU SAE AutoDrive Challenge IIPerception Team Member, OSU Center for Automotive Research (Aug 2022 - Dec 2022) Built multi-branch perception pipelines for 2D/3D object detection using LiDAR and RGB cameras. COURSE PROJECTSVirtruMart: Immersive Shopping Experience in Mixed RealityCMU Graduate Course Project (Sep 2024 - Dec 2024) Developed an immersive MR shopping platform for Meta Quest, enabling spatial anchoring, object manipulation, and categorized cart management. Advanced LLM Development and Fine-TuningCMU Graduate Course Project (Jan 2024 - May 2024) Designed a system leveraging LLMs for 3D CAD model generation with a 22.5% accuracy improvement. On-Device Vision Foundation Model for Defects DetectionCMU Graduate Course Project (Aug 2023 - Dec 2023) Achieved 95% defect detection accuracy using Florence2 and UFlow models on Raspberry Pi. INTERNSHIP EXPERIENCEAI/ML Industry 4.0 Intern – Coherent Corp (Jun 2024 - Aug 2024) Developed an automated defect detection system with &gt;92% accuracy for laser sensor coatings. Deep Learning Algorithm Engineer – Shenzhen Huafu Technology Co. (May 2023 - Jul 2023) Optimized YOLOv8 for on-edge processing with NVIDIA Jetson Nano, achieving 96% AP. Data Analyst Intern – Shenzhen Infinity Capital Management (Jun 2020 - Aug 2020) Performed stock price forecasting and recommendations using Spark ML. RELEVANT COURSESGraduate: Intro to Machine Learning, Algorithms for Distributed ML, On-Device ML, Intro to XR, Advanced NLP, Foundations of Computer Systems Undergraduate: Neural Networks, Computer Vision, Data Structures and Algorithms, Artificial Intelligence TECHNICAL SKILLS Programming: Python, C++, MATLAB, Java, R, SQL, Linux, Docker, AWS Frameworks: PyTorch, TensorFlow, OpenCV, Spark, ROS Feel free to let me know if further adjustments are needed!","link":"/Curriculum/index.html"},{"title":"Wenjin Fu","text":"Who am IMy name is Wenjin (Wendy) Fu, recently finished my graduate studies in Electrical and Computer Engineering with a AI/ML Concentration at Carnegie Mellon University. Prior to that, I earned my bachelor’s degree in Computer and Information Science from The Ohio State University. ==I am currently actively looking for full-time job as a Data Scientist, Machine Learning/Deep Learning Engineer, or Software Engineer in the market.== My research and engineering interests are mainly in the area of Machine Learning, Deep Learning, Computer Vision, Multimodal Learning, Generative AI, and Natural Language Processing. In my spare time, I love swimming and jogging, always looking for ways to stay healthy and active. When I need a break from studying to recharge, I love watching movies, especially drawn to thrillers, horror, action, and detective films. I also enjoy reading novels, biographies, and mystery books whenever I have some free time. I also have a playful and energetic American Eskimo dog named Oili, who is bursting with energy every single day. If you’d like to learn more about me, feel free to connect with me on LinkedIn. I consider myself a warm, positive, and genuine person who loves meeting new people and building connections. For more details about my academic and industry experience, check out my curriculum page.","link":"/about/index.html"}]}