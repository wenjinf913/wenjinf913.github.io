{"posts":[{"title":"Linked List","text":"21. Merge Two Sorted Lists Solution: Create a dummy node to simplify merging and initialize a pointer p starting at the dummy. Traverse both lists using pointers p1 and p2. Compare their values and append the smaller node to the merged list by updating p.next. Move the respective pointer (p1 or p2) and advance p. Once one list is exhausted, append the remaining nodes of the other list to p.next. Return the merged list starting from dummy.next, skipping the dummy node. Time Complexity: O(M+N) Space Complexity: O(1) 12345678910111213141516171819class Solution: def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -&gt; Optional[ListNode]: p1 = list1 p2 = list2 dummy = ListNode(-1) p=dummy while p1!=None and p2!=None: if p1.val &gt; p2.val: p.next = p2 p2 = p2.next else: p.next = p1 p1 = p1.next p = p.next if p1!=None: p.next = p1 elif p2!=None: p.next=p2 return dummy.next 86. Partition List Note: Ensure you break the next link for each node during traversal to avoid cycles and maintain the partition order correctly. 1234567891011121314151617181920class Solution: def partition(self, head: Optional[ListNode], x: int) -&gt; Optional[ListNode]: less = ListNode(-1) greater = ListNode(-1) l = less g = greater p=head while p!=None: if p.val&lt;x: l.next=p l = l.next else: g.next=p g = g.next temp = p.next p.next = None p = temp l.next = greater.next return less.next 23. Merge k Sorted Lists 123456789101112131415161718import heapqclass Solution: def mergeKLists(self, lists: List[Optional[ListNode]]) -&gt; Optional[ListNode]: pq = [] dummy = ListNode(-1) p = dummy if not lists: return None for i,head in enumerate(lists): if head is not None: heapq.heappush(pq, (head.val, i, head)) while pq: val, i, head = heapq.heappop(pq) p.next = head p = p.next if head.next is not None: heapq.heappush(pq, (head.next.val, i, head.next)) return dummy.next 19. Remove Nth Node From End of List Solution: Create a dummy node and set both slow and fast pointers to it, linking dummy to the head. Move the fast pointer n+1 steps ahead to maintain a gap of n nodes between fast and slow. Move both slow and fast one step at a time until fast reaches the end of the list. Update slow.next to skip the target node by pointing it to slow.next.next. Return dummy.next as the new head. 12345678910111213class Solution: def removeNthFromEnd(self, head: Optional[ListNode], n: int) -&gt; Optional[ListNode]: dummy = ListNode(-1) slow = dummy fast = dummy dummy.next = head for _ in range(n+1): fast = fast.next while fast!=None: fast=fast.next slow=slow.next slow.next = slow.next.next return dummy.next Note: Edge Case - Single Node List: If the list has only one node and n = 1, the dummy node ensures the code handles it properly by returning None. Gap of n+1: Moving fast ahead by n+1 steps is critical to ensure that when fast reaches the end, slow is at the node before the one to be removed. 142. Linked List Cycle II Solution: 123456789101112131415161718192021222324252627class Solution: def detectCycle(self, head: Optional[ListNode]) -&gt; Optional[ListNode]: &quot;&quot;&quot; 3-2: L 2--4-2: C 2-meeting point = x slow: L+x fast: 2(L+x) 2(L+x)-(L+x) = nC L+x=nC L=nC-x &quot;&quot;&quot; slow, fast = head, head while fast!=None and fast.next!=None: slow = slow.next fast = fast.next.next if slow==fast: break if not fast or fast.next==None: return None fast = slow slow = head while fast!=slow: fast = fast.next slow = slow.next return slow 160. Intersection of Two Linked Lists Solution: Initialize two pointers, p1 and p2, at the heads of the two lists, headA and headB. Traverse the lists with p1 and p2. If a pointer reaches the end of its list, redirect it to the head of the other list. Continue until p1 equals p2, which will either be the intersection node or None if there is no intersection. Return p1 as the result. Note: Handling No Intersection: If the two lists do not intersect, both p1 and p2 will eventually reach None at the same time after traversing both lists, ensuring the loop exits correctly. Time Complexity: O(m+n), where m and n are the lengths of the two lists, as each pointer traverses both lists once. 12345678910111213class Solution: def getIntersectionNode(self, headA: ListNode, headB: ListNode) -&gt; Optional[ListNode]: p1, p2 = headA, headB while p1!=p2: if p1 is None: p1 = headB else: p1 = p1.next if p2 is None: p2 = headA else: p2 = p2.next return p1","link":"/2025/01/09/linked-list/Linked-List/"}],"tags":[{"name":"Leetcode","slug":"Leetcode","link":"/tags/Leetcode/"},{"name":"Linked List","slug":"Linked-List","link":"/tags/Linked-List/"}],"categories":[{"name":"CodeCraft","slug":"CodeCraft","link":"/categories/CodeCraft/"}],"pages":[{"title":"Curriculum","text":"Wenjin Fu GitHub: https://github.com/WenjinFu Email: wenjinf@andrew.cmu.edu | Phone: +1 614-8163978 Address: San Diego, CA, 92123 EDUCATIONCarnegie Mellon University – Pittsburgh, PAMaster of Science in Electrical and Computer Engineering (GPA: 3.50/4.00)Jan 2023 - Dec 2024 The Ohio State University – Columbus, OHBachelor of Science in Computer and Information Science (GPA: 3.63/4.00, Cum Laude)Aug 2018 - Dec 2022 GRE: Verbal 161 | Quantitative 170 | Analytical Writing 4.0 AWARDS Dean’s List (Autumn 2019, Spring 2020, Autumn 2021), The Ohio State University Summer Undergraduate Research Fellowship (10% acceptance) [Certificate], Purdue University, 2022 PUBLICATIONS W Fu, Y. Han, J. He, S. Baireddy, F. Zhu, “Conditional Synthetic Food Image Generation”, Electronic Imaging (EI), 2023. [arXiv] [Slide] C Zhang, TY Pan, T Chen, J Zhong, W Fu, WL Chao, “Learning with Free Object Segments for Long-Tailed Instance Segmentation”, ECCV, 2022. [PDF] X Deng*, W Fu*, P Liang, H Jing, Y Nakahira, “LLM-assisted Qualitative Learning Framework on Safety Control and Failure Recovery”, In Preparation (equal contribution). [Abstract] RESEARCH PROJECTSLatent Risk Aware LLM Guided Trajectory Generation for AV Safe ControlGraduate Research Assistant, Control and Learning Group, CMU, supervised by Prof. Yorie Nakahira (Jan 2024 - Present) Developed an LLM-assisted framework integrating supervised learning, reinforcement learning, and diffusion models in the nuPlan environment. OSU SAE AutoDrive Challenge IIPerception Team Member, OSU Center for Automotive Research, supervised by Prof. Wei-Lun Chao (Aug 2022 - Dec 2022) Developed real-time, multi-branch perception pipelines for 2D and 3D object, vehicle, pedestrian, and lane bounding box detection and tracking with LiDAR and RGB Camera sensors. Trained a 3D object detection model with public synthetic data and fine-tuned with the annotated 3D benchmark video for vehicle real-time information retrieval and reaction Conditional Synthetic Food Image GenerationSummer Undergraduate Research Fellow, Video and Image Processing Laboratory (VIPER) at Purdue University, supervised by Prof. Fengqing Maggie Zhu (May 2022-Aug 2022) Proposed a single-class and image-patches training on StyleGAN3 in synthetic food image generation to address the issues of inter-class feature entanglement and loss of high-resolution details. Synthetic food image with SOTA realism and improve food classification model by 10% when data scarce (EI 2023). Instance Segmentation Based on Deep Neural NetworksUndergraduate Research Assistant, Machine Learning as the Basis Laboratory at the Ohio State University, supervised by Prof. Wei-Lun Chao (July 2021-Jan 2022) Developed the FreeSeg framework, utilizing image co-segmentation, segment refinement, and a learned ranker for long-tailed datasets augmentation. Achieved ~12% better AP of rare-category instance segmentation than SOTA methods (CVPR Workshop, ECCV 2022). COURSE PROJECTSVirtruMart: Immersive Shopping Experience in Mixed RealityCMU Graduate Course Project (Sep 2024 - Dec 2024) Developed an immersive MR shopping platform for Meta Quest, enabling spatial anchoring, object manipulation, and categorized cart management [Slides]. Features included spatial anchoring for product persistence, material customization, object manipulation (drag, rotate, place), and seamless management of a categorized shopping cart to enhance user experience. Advanced LLM Development and Fine-TuningCMU Graduate Course Project (Jan 2024 - May 2024) Developed a novel system leveraging LLMs and iterative refinement for 3D CAD model generation, achieving 65% accuracy on the test dataset, with a 22.5% improvement in accuracy over direct code generation methods. [Poster] Implemented key components like multi-head attention, and AdamW optimizer modules, realizing Llama2’s abilities for efficient text generation and zero-shot prompting. [GitLink] Fine-tuned LLM via Retrieval Augmented Generation (RAG) system, leveraging dense retriever, reranker, and multiquery module in RAG to boost LLM’s domain knowledge, achieving a 1.57-fold increase in F1 score. [Report] On-Device Vision Foundation Model for Defects DetectionCMU Graduate Course Project (Aug 2023 - Dec 2023) Designed and deployed an on-device defect detection system using Florence2 for segmentation and UFlow for classification, leveraging LoRA task-specific fine-tuning and advanced various quantization and pruning techniques. Achieved stable 95% accuracy on Raspberry Pi with a balanced trade-off between latency and accuracy. [Slides] CCAM for Weakly Supervised Semantic SegmentationUndergraduate Research Assistant, Machine Learning as the Basis Laboratory at the Ohio State University, supervised by Prof. Wei-Lun Chao (Jan 2022-May 2022) Proposed a CCAM (Co-segments and Class Activation Map) framework with SOTA performance for generating highquality pseudo ground truth mask &amp; training the segmentation network under image-level weak supervision. [Paper] INTERNSHIP EXPERIENCEAI/ML Industry 4.0 Intern – Coherent Corp (Jun 2024 - Aug 2024) Developed an automated system for evaluating laser sensor coatings on customer RMAs, achieving over 92% accuracy by leveraging advanced CV techniques for data preprocessing (ROI segmentation), GAN for synthetic data generation, an unsupervised normalizing flow model for defect detection. [Slide] Designed a 3D model using Fusion 360 and FlashDLPrint for physical setups with 3D printer, integrated with Raspberry Pi, to streamline quality control on the production line. Deep Learning Algorithm Engineer – Shenzhen Huafu Technology Co. (May 2023 - Jul 2023) Optimized YOLOv8 model for detecting tobacco debris (like plastic, paperboard, and foam) on production line and deployed it on NVIDIA Jetson Nano devices, achieving 96% AP with efficient on-edge processing. Implemented Stable Diffusion model for generative tasks. Target data included extinguishers, fireworks, and human behaviors. Augmented scene data through target object replacement, addition, and editing attributes. Data Analyst Intern – Shenzhen Infinity Capital Management (Jun 2020 - Aug 2020) Fulfilled data collection and analysis tasks, utilizing Python, Wind, and Excel to process financial product data. Employed Spark’s machine learning algorithms (Linear Regression, Random Forest, gradient boosting tree) for stock price forecasting and recommendation based on more than 3,000 stocks time series trading data in the market. RELEVANT COURSESGraduate: Intro to ML; Algorithms for Large-scale Distributed Machine Learning and Optimization; Intro to XR; Foundation of Computer System; Introduction to Deep Learning and Pattern Recognition for Computer Vision; Advanced Natural Language Processing; On-Device Machine Learning; Rapid Prototyping of Computer Systems Undergraduate: Neural Network; Computer Vision; Software Development and Design; Web Applications; Data Structure and Algorithms, Artificial Intelligence; Database System; Probability for Data Analytics; Foundation of Higher Mathematics; Calculus TECHNICAL SKILLS Programming/Environments: Python, C++, Matlab, Java, R, Ruby, SQL, Linux, HTML, AWS, Azure, Docker, ROS DL-frameworks &amp; Image-processing Libraries:: PyTorch, Spark, Tensorflow, OpenCV, Pillow","link":"/Curriculum/index.html"},{"title":"Wenjin Fu","text":"Who am IMy name is Wenjin (Wendy) Fu, recently finished my graduate studies in Electrical and Computer Engineering with a AI/ML Concentration at Carnegie Mellon University. Prior to that, I earned my bachelor’s degree in Computer and Information Science from The Ohio State University. ==I am currently actively looking for full-time job as a Data Scientist, Machine Learning/Deep Learning Engineer, or Software Engineer in the market.== My research and engineering interests are mainly in the area of Machine Learning, Deep Learning, Computer Vision, Multimodal Learning, Generative AI, and Natural Language Processing. In my spare time, I love swimming and jogging, always looking for ways to stay healthy and active. When I need a break from studying to recharge, I love watching movies, especially drawn to thrillers, horror, action, and detective films. I also enjoy reading novels, biographies, and mystery books whenever I have some free time. I also have a playful and energetic American Eskimo dog named Oili, who is bursting with energy every single day. If you’d like to learn more about me, feel free to connect with me on LinkedIn. I consider myself a warm, positive, and genuine person who loves meeting new people and building connections. For more details about my academic and industry experience, check out my curriculum page.","link":"/about/index.html"}]}